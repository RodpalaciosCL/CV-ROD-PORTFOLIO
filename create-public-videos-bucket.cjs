const { S3Client, CreateBucketCommand, PutPublicAccessBlockCommand, PutBucketPolicyCommand } = require('@aws-sdk/client-s3');

// Importar configuraci√≥n
const config = require('./cloudflare-config.cjs');

const s3Client = new S3Client({
  region: 'auto',
  endpoint: config.R2_ENDPOINT,
  credentials: {
    accessKeyId: config.R2_ACCESS_KEY_ID,
    secretAccessKey: config.R2_SECRET_ACCESS_KEY,
  },
});

async function createPublicVideosBucket() {
  const PUBLIC_BUCKET_NAME = 'rodcv-public-videos';
  
  console.log('üîß Creando bucket p√∫blico espec√≠fico para videos...\n');

  try {
    // Paso 1: Crear el bucket
    console.log('üìã Paso 1: Creando bucket p√∫blico...');
    const createBucketCommand = new CreateBucketCommand({
      Bucket: PUBLIC_BUCKET_NAME,
    });

    await s3Client.send(createBucketCommand);
    console.log(`‚úÖ Bucket creado: ${PUBLIC_BUCKET_NAME}\n`);

    // Paso 2: Configurar acceso p√∫blico
    console.log('üìã Paso 2: Configurando acceso p√∫blico...');
    const publicAccessBlockCommand = new PutPublicAccessBlockCommand({
      Bucket: PUBLIC_BUCKET_NAME,
      PublicAccessBlockConfiguration: {
        BlockPublicAcls: false,
        IgnorePublicAcls: false,
        BlockPublicPolicy: false,
        RestrictPublicBuckets: false,
      },
    });

    await s3Client.send(publicAccessBlockCommand);
    console.log('‚úÖ Bloqueo de acceso p√∫blico deshabilitado\n');

    // Paso 3: Configurar pol√≠tica p√∫blica
    console.log('üìã Paso 3: Configurando pol√≠tica p√∫blica...');
    const bucketPolicy = {
      Version: '2012-10-17',
      Statement: [
        {
          Sid: 'PublicReadGetObject',
          Effect: 'Allow',
          Principal: '*',
          Action: 's3:GetObject',
          Resource: `arn:aws:s3:::${PUBLIC_BUCKET_NAME}/*`,
        },
      ],
    };

    const putPolicyCommand = new PutBucketPolicyCommand({
      Bucket: PUBLIC_BUCKET_NAME,
      Policy: JSON.stringify(bucketPolicy),
    });

    await s3Client.send(putPolicyCommand);
    console.log('‚úÖ Pol√≠tica p√∫blica configurada\n');

    console.log('üéâ ¬°Bucket p√∫blico creado exitosamente!');
    console.log(`üìÅ Bucket: ${PUBLIC_BUCKET_NAME}`);
    console.log(`üåê URL base: ${config.R2_ENDPOINT}/${PUBLIC_BUCKET_NAME}/`);
    console.log('\nüí° Ahora puedes copiar solo los videos que necesitas');

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    
    if (error.name === 'BucketAlreadyExists') {
      console.log(`\n‚ÑπÔ∏è  El bucket ${PUBLIC_BUCKET_NAME} ya existe`);
      console.log('üí° Puedes usarlo directamente o crear uno con otro nombre');
    } else if (error.name === 'AccessDenied') {
      console.log('\nüîë Error de permisos. Verifica que el token tenga permisos de "Admin Read & Write"');
    }
  }
}

createPublicVideosBucket();
